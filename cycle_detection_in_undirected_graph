#include<iostream>
#include<unordered_map>
#include<list>
#include<queue>
bool cyclebfs(unordered_map<int ,list<int>> &adj,vector<int> &check,int node){
vector<int>parent;
    
    queue<int> q;
    parent[node]=-1;
    check[node]=true;
    q.push(node);
    while(!q.empty()){
    int front=q.front();
    q.pop();

    for(auto k: adj[front]){
         
    if(check[k]==true && parent[k]!=front){
return true;
    }
       
       else if(!check[k]){
            parent[k]=front;
            q.push(k);
            check[k]=1;
        }
    }
    
    }
  return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
   
     unordered_map<int ,list<int>> adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        
        adj[u].push_back(v);
        adj[v].push_back(u);
        
        
    }
    vector<int> check;
  
    for(int i=0;i<n;i++){
        
        if(!check[i]){
          
         bool ans= cyclebfs(adj,check,i);
            cout<<ans;
                if(ans)
                   return "Yes";
        
        }
     
    }
    return "No";
     
    
  
}
